#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Oct 18, 2022 05:12:03 PM CST  platform: Windows NT

import aaa_support
import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)


_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40'  # X11 color: #666666
_ana1color = '#c3c3c3'  # Closest X11 color: 'gray76'
_ana2color = 'beige'  # X11 color: #f5f5dc
_tabfg1 = 'black'
_tabfg2 = 'black'
_tabbg1 = 'grey75'
_tabbg2 = 'grey89'
_bgmode = 'light'

_style_code_ran = 0


def _style_code():
    global _style_code_ran
    if _style_code_ran:
        return
    style = ttk.Style()
    if sys.platform == "win32":
        style.theme_use('winnative')
    style.configure('.', background=_bgcolor)
    style.configure('.', foreground=_fgcolor)
    style.configure('.', font='TkDefaultFont')
    style.map('.', background=[
              ('selected', _compcolor), ('active', _ana2color)])
    if _bgmode == 'dark':
        style.map('.', foreground=[('selected', 'white'), ('active', 'white')])
    else:
        style.map('.', foreground=[('selected', 'black'), ('active', 'black')])
    _style_code_ran = 1


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("398x109+592+273")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(background="#d9d9d9")

        self.top = top

        self.Button1 = tk.Button(self.top)
        self.Button1.place(relx=0.578, rely=0.642, height=24, width=48)
        self.Button1.configure(activebackground="beige")
        self.Button1.configure(activeforeground="black")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(compound='left')
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''送出''')

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.0, rely=0.092, height=35, width=65)
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''金素材數量:''')

        self.Label1_1 = tk.Label(self.top)
        self.Label1_1.place(relx=0.0, rely=0.367, height=25, width=65)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(anchor='w')
        self.Label1_1.configure(background="#d9d9d9")
        self.Label1_1.configure(compound='left')
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''銀素材數量:''')

        self.Label1_1_1 = tk.Label(self.top)
        self.Label1_1_1.place(relx=0.0, rely=0.642, height=25, width=75)
        self.Label1_1_1.configure(activebackground="#f9f9f9")
        self.Label1_1_1.configure(anchor='w')
        self.Label1_1_1.configure(background="#d9d9d9")
        self.Label1_1_1.configure(compound='left')
        self.Label1_1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1_1.configure(foreground="#000000")
        self.Label1_1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1_1.configure(highlightcolor="black")
        self.Label1_1_1.configure(text='''銅素材數量:''')

        _style_code()
        self.TEntry1_1_1 = ttk.Entry(self.top)
        self.TEntry1_1_1.place(relx=0.176, rely=0.642,
                               relheight=0.229, relwidth=0.369)
        self.TEntry1_1_1.configure(takefocus="")
        self.TEntry1_1_1.configure(cursor="ibeam")

        self.TEntry1_1_1_1 = ttk.Entry(self.top)
        self.TEntry1_1_1_1.place(
            relx=0.176, rely=0.367, relheight=0.229, relwidth=0.369)
        self.TEntry1_1_1_1.configure(takefocus="")
        self.TEntry1_1_1_1.configure(cursor="ibeam")

        self.TEntry1_1_1_1_1 = ttk.Entry(self.top)
        self.TEntry1_1_1_1_1.place(
            relx=0.176, rely=0.092, relheight=0.229, relwidth=0.369)
        self.TEntry1_1_1_1_1.configure(takefocus="")
        self.TEntry1_1_1_1_1.configure(cursor="ibeam")

        self.Text1 = tk.Text(self.top)
        self.Text1.place(relx=0.704, rely=0.092,
                         relheight=0.771, relwidth=0.261)

        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(wrap="word")


def start_up():
    aaa_support.main()


if __name__ == '__main__':
    aaa_support.main()
